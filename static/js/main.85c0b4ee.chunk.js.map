{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","_ref","robots","cards","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","nextProps","nextState","console","log","color","onClick","React","Component","Header","components_CounterButton","ErrorBoundry","hasError","error","info","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.85c0b4ee.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n  const {name, email, id} = props;\n\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n  const cards = robots.map((user, i) => {\n    return (\n      <Card\n      key={i}\n      id={robots[i].id}\n      name={robots[i].name}\n      email={robots[i].email}/>\n      );\n  });\n\n  return (\n    <div>\n      {cards}\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className=\"pa2\">\n      <input type=\"search\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        placeholder=\"Search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll',\n      border: '3px solid black',\n      height: '500px'}}>\n        { props.children }\n    </div>\n  );\n}\n\nexport default Scroll;\n","import React from 'react';\n\nclass CounterButton extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count){\n      return true;\n    }\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: state.count + 1}\n    });\n  }\n\n  render() {\n    console.log(\"CounterButton\");\n    return (\n      <button className=\"f6 link dim ba bw2 ph3 pv2 mb2 dib purple\" color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    )\n  }\n}\n\nexport default CounterButton;\n","import React from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends React.Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n    console.log(\"Header\");\n    return (\n      <div>\n        <h1 className=\"f2\"> Robofriends </h1>\n        <CounterButton color={'red'} />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1> Oooooops. Something in this realm is out of balance</h1>\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\n\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component{\n\n  // Reduxed\n  // constructor(){\n  //   super();\n  //   this.state = {\n  //     robots: [],\n  //     // searchField: '' // Reduxed\n  //   }\n  // }\n\n  // Reduxed\n  // onSearchChange = (event) => {\n  //   this.setState({ searchField: event.target.value});\n  // }\n\n  componentDidMount(){\n    this.props.onRequestRobots();\n\n    // Reduxed\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    // .then(response => response.json())\n    // .then(users =>  this.setState({ robots: users}));\n  }\n\n  render(){\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if(isPending){\n      return <h1 className=\"tc\"> Loading </h1>;\n    }\n\n    return (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users}))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}));\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants.js';\n\nconst initialState = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload})\n      // or\n      // return { ...state, searchField: action.payload}\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true});\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false});\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false});\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}